# Generated by Django 4.2.19 on 2025-04-25 10:25

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import utils.validator


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('bsadmin', '0006_categorytranscript_category'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClearanceSheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('myedu_id', models.PositiveIntegerField(help_text='Студент, которому принадлежит обходной лист.', verbose_name='Студент')),
                ('student_fio', models.CharField(blank=True, max_length=255, null=True, verbose_name='ФИО')),
                ('myedu_faculty_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Факультет ID')),
                ('myedu_faculty', models.CharField(blank=True, max_length=255, null=True, verbose_name='Факультет')),
                ('myedu_spec_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Специальность ID')),
                ('myedu_spec', models.CharField(blank=True, max_length=255, null=True, verbose_name='Специальность')),
                ('category', models.CharField(choices=[('student', 'Студент'), ('teacher', 'Преподаватель'), ('worker', 'Работник')], default='student', help_text='Категория сотрдников ОшГУ', max_length=20, verbose_name='Категория')),
                ('issued_at', models.DateTimeField(auto_now_add=True, help_text='Дата выдачи обходного листа.', verbose_name='Дата выдачи')),
                ('order_date', models.CharField(blank=True, max_length=255, null=True, verbose_name='Дата приказа')),
                ('order', models.CharField(blank=True, max_length=255, null=True, verbose_name='Приказ')),
                ('order_status', models.CharField(blank=True, max_length=255, null=True, verbose_name='Статус')),
                ('type_choices', models.CharField(blank=True, choices=[('speciality', 'Спец. часть'), ('other', 'Остальные')], max_length=50, null=True, verbose_name='Выберите тип')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Дата завершения обходного листа.', null=True, verbose_name='Дата завершения')),
            ],
            options={
                'verbose_name': 'Обходной лист',
                'verbose_name_plural': 'Обходные листы',
            },
        ),
        migrations.CreateModel(
            name='IssuanceHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student', models.PositiveIntegerField(help_text='Студент, которому принадлежит обходной лист.', verbose_name='Студент')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания обходного листа', verbose_name='Дата создания')),
                ('cs', models.PositiveIntegerField(default=0, verbose_name='Обходной лист')),
                ('history', models.CharField(max_length=255, verbose_name='Причина')),
                ('type_choices', models.CharField(choices=[('speciality', 'Спец. часть'), ('other', 'Остальные')], default='other', max_length=50, verbose_name='Выберите тип')),
            ],
            options={
                'verbose_name': 'История выдачи обходного листа',
                'verbose_name_plural': 'История выдачи обходных листов',
            },
        ),
        migrations.CreateModel(
            name='Stage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название этапа.', max_length=100, unique=True, verbose_name='Название этапа')),
                ('is_mandatory', models.BooleanField(default=False, help_text='Является ли этап обязательным.', verbose_name='Обязательный этап')),
            ],
            options={
                'verbose_name': 'Этап',
                'verbose_name_plural': 'Этапы',
            },
        ),
        migrations.CreateModel(
            name='TemplateStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('student', 'Студент'), ('teacher', 'Преподаватель'), ('worker', 'Работник')], default='student', help_text='Категория сотрдников ОшГУ', max_length=20, verbose_name='Категория')),
                ('order', models.PositiveIntegerField(help_text='Порядок прохождения этапа.', verbose_name='Порядок')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bsadmin.role', verbose_name='Роль')),
                ('stage', models.ForeignKey(help_text='Этап, который проходит студент.', on_delete=django.db.models.deletion.CASCADE, to='stepper.stage', verbose_name='Этап')),
            ],
            options={
                'verbose_name': 'Шаблон',
                'verbose_name_plural': 'Шаблоны',
            },
        ),
        migrations.CreateModel(
            name='Trajectory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, help_text='Дата назначения этапа.', verbose_name='Дата назначения')),
                ('update_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='Дата обновления этого статуса.', null=True, verbose_name='Дата обновления')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Дата завершения этапа.', null=True, verbose_name='Дата завершения')),
                ('assigned_by', models.ForeignKey(help_text='Кто назначил этап.', on_delete=django.db.models.deletion.PROTECT, related_name='assigned_trajectories', to=settings.AUTH_USER_MODEL, verbose_name='Назначил')),
                ('clearance_sheet', models.ForeignKey(help_text='Обходной лист, к которому относится траектория.', on_delete=django.db.models.deletion.PROTECT, to='stepper.clearancesheet', verbose_name='Обходной лист')),
                ('template_stage', models.ForeignKey(help_text='Этап, который проходит студент.', on_delete=django.db.models.deletion.CASCADE, to='stepper.templatestep', verbose_name='Этап')),
            ],
            options={
                'verbose_name': 'Траектория',
                'verbose_name_plural': 'Траектории',
            },
        ),
        migrations.CreateModel(
            name='StageStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment_text', models.TextField(help_text='Комментарий для этого этапа.', verbose_name='Комментарий')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата добавления этого статуса.', verbose_name='Дата создания')),
                ('processed_by', models.ForeignKey(help_text='Сотрудник, который обрабатывает этап.', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Обработал')),
                ('trajectory', models.ForeignKey(help_text='Связь с траекторией студента.', on_delete=django.db.models.deletion.PROTECT, to='stepper.trajectory', verbose_name='Траектория')),
            ],
            options={
                'verbose_name': 'Статус этапа с комментарием',
                'verbose_name_plural': 'Статусы этапов с комментариями',
            },
        ),
        migrations.CreateModel(
            name='Issuance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student', models.PositiveIntegerField(help_text='Студент, которому принадлежит обходной лист.', verbose_name='Студент')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания обходного листа', verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата обновления обходного листа', verbose_name='Дата создания')),
                ('date_issue', models.DateField(blank=True, help_text='Дата выдачи обходного листа', null=True, verbose_name='Дата выдачи')),
                ('doc_number', models.CharField(max_length=255, verbose_name='Дипломный номер')),
                ('reg_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='Регистрационный номер')),
                ('files', models.FileField(blank=True, null=True, upload_to='document/files/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf']), utils.validator.validate_file_size], verbose_name='Диплом')),
                ('fio', models.CharField(blank=True, max_length=150, null=True, verbose_name='ФИО')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон')),
                ('inn', models.CharField(blank=True, max_length=100, null=True, verbose_name='ИНН')),
                ('signature', models.ImageField(blank=True, null=True, upload_to='document/')),
                ('status', models.CharField(choices=[('received', 'Получил'), ('double', 'Дубликат')], default='received', max_length=20, verbose_name='Получил')),
                ('type_choices', models.CharField(choices=[('speciality', 'Спец. часть'), ('other', 'Остальные')], default='other', max_length=50, verbose_name='Выберите тип')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Заметка')),
                ('cs', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='stepper.clearancesheet', verbose_name='Обходной лист')),
                ('employee', models.ForeignKey(help_text='Сотрудник, который обрабатывает этап.', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Обработал')),
                ('faculty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='bsadmin.faculty', verbose_name='Факультет студента')),
                ('speciality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='bsadmin.speciality', verbose_name='Специальность студента')),
            ],
            options={
                'verbose_name': 'Выдача обходного листа',
                'verbose_name_plural': 'Выдача обходных листов',
            },
        ),
        migrations.CreateModel(
            name='StageEmployee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_date', models.DateTimeField(auto_now_add=True, help_text='Дата назначения сотрудника на этап.', verbose_name='Дата назначения')),
                ('is_active', models.BooleanField(default=True, help_text='Отметка о том, активен ли сотрудник на данном этапе.', verbose_name='Активен ли сотрудник на этом этапе')),
                ('employee', models.ForeignKey(help_text='Сотрудник, который работает с этапом.', on_delete=django.db.models.deletion.CASCADE, related_name='stage_employees', to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
                ('template_stage', models.ForeignKey(help_text='Этап, который проходит студент.', on_delete=django.db.models.deletion.CASCADE, to='stepper.templatestep', verbose_name='Этап')),
            ],
            options={
                'verbose_name': 'Связь сотрудника с этапом',
                'verbose_name_plural': 'Связи сотрудников с этапами',
                'unique_together': {('template_stage', 'employee')},
            },
        ),
    ]
