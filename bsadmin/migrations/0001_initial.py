# Generated by Django 4.2.19 on 2025-02-14 10:29

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicTranscript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('count', models.PositiveIntegerField(verbose_name='Количество')),
                ('create_date', models.DateField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Информация о академичской справки',
                'verbose_name_plural': 'Информации о академичской справки',
            },
        ),
        migrations.CreateModel(
            name='CategoryTranscript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Категория академической справки',
                'verbose_name_plural': 'Категории академической справки',
            },
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название')),
                ('myedu_faculty_id', models.PositiveIntegerField(unique=True, verbose_name='MyEDU Факультет ID')),
                ('short_name', models.CharField(max_length=150, verbose_name='Короткое название')),
                ('visit', models.BooleanField(default=True, verbose_name='Показывать')),
            ],
            options={
                'verbose_name': 'Факультет',
                'verbose_name_plural': 'Факультеты',
            },
        ),
        migrations.CreateModel(
            name='FacultyTranscript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transcript_number', models.CharField(max_length=255, unique=True, verbose_name='Уникальный идентификатор')),
                ('academic_transcript', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bsadmin.academictranscript', verbose_name='Академическая справка')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bsadmin.categorytranscript', verbose_name='Категория')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bsadmin.faculty', verbose_name='Факультет')),
            ],
            options={
                'verbose_name': 'Академическая справка',
                'verbose_name_plural': 'Академические справки',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'verbose_name': 'Роль',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='RegistrationTranscript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_uuid', models.CharField(max_length=100, unique=True, verbose_name='Уникальный номер студента')),
                ('student_fio', models.CharField(max_length=150, verbose_name='ФИО студента')),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bsadmin.faculty', verbose_name='Факультет студента')),
                ('faculty_transcript', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bsadmin.facultytranscript', verbose_name='Академическая справка')),
            ],
            options={
                'verbose_name': 'Регистрация студента',
                'verbose_name_plural': 'Регистрация студентов',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('myedu_id', models.CharField(max_length=150, unique=True)),
                ('last_name', models.CharField(max_length=150)),
                ('first_name', models.CharField(max_length=150)),
                ('fathers_name', models.CharField(blank=True, max_length=150, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('roles', models.ManyToManyField(related_name='users', to='bsadmin.role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
    ]
